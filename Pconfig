#
# Copyright (C) 2020 Jan Nowotsch
# Author Jan Nowotsch	<jan.nowotsch@gmail.com>
#
# Released under the terms of the GNU GPL v2.0
#



#
# build system
#
# {{{
choice
	prompt "Target architecture"

	config AVR
		bool "AVR"
endchoice

menu "Hidden"
	visible if 0

	config ARCH
		string "Architecture"
		default "avr" if AVR

	config PROCESSOR
		string "Processor"
		default AVR_MCU if AVR

	config BRICKOS_CONFIG
		string "Brickos config"
		default "scripts/config/brickos/$(CONFIG_AVR_MCU)" if AVR

	config DEVICE_TREE
		string "Device tree"
		default "scripts/dts/brickos.$(CONFIG_AVR_MCU).dts" if AVR
endmenu

if AVR
	choice
		prompt "Target MCU"
			
		config ATMEGA1284P
			bool "Atmega1284P"
			select AVR_ISA_AVR51
			select AVR_ATMEGA

		config ATMEGA88PA
			bool "Atmega88PA"
			select AVR_ISA_AVR4
			select AVR_ATMEGA
	endchoice

	menu "Hidden"
		visible if 0

		config AVR_MCU
			string "MCU"
			default "atmega1284p" if ATMEGA1284P
			default "atmega88pa" if ATMEGA88PA
			default "unknown MCU"

		config AVR_ISA_AVR4
			bool "AVR4"

		config AVR_ISA_AVR51
			bool "AVR51"

		config AVR_ISA
			string "ISA"
			default "avr4" if AVR_ISA_AVR4
			default "avr51" if AVR_ISA_AVR51

		config AVR_ATMEGA
			bool "Atmega MCU"
			default n

		config AVR_XMEGA
			bool "Xmega MCU"
			default n
	endmenu
endif # AVR

menu "Build system"
	# build type
	choice
		prompt "Build type"

		config BUILD_DEBUG
			bool "debug"

		config BUILD_RELEASE
			bool "release"
	endchoice

	menu "Hidden"
		visible if 0

		config BUILD_TYPE
			string "Build type"
			default "debug" if BUILD_DEBUG
			default "release" if BUILD_RELEASE
	endmenu

	# AVR programmer
	menu "AVR programmer"
		depends on AVR

		config AVR_PROG
			string "Programmer"
			default "avrdude"

		config AVR_DEBUGGER
			string "Debugger"
			default "avarice"

		choice
			prompt "Programmer type"

			config AVR_DRAGON_JTAG
				bool "AVR Dragon JTAG"
				depends on ATMEGA1284P

			config AVR_DRAGON_ISP
				bool "AVR Dragon ISP"
		endchoice

		choice
			prompt "Programmer port"

			config AVR_PROG_PORT_USB
				bool "usb"

			config AVR_PROG_PORT_UART
				bool "uart"
		endchoice

		config AVR_PROG_UART_DEV
			string "Uart device"
			default "/dev/ttyUSB0"
			depends on AVR_PROG_PORT_UART

		menu "Hidden"
			visible if 0

			config AVR_PROG_PORT
				string "Programmer port"
				default "usb" if AVR_PROG_PORT_USB
				default AVR_PROG_UART_DEV if AVR_PROG_PORT_UART
				default "unknown programmer port"

			config AVR_PROG_DEBUG_ARGS
				string "Programmer debug arguments"
				default "--debugwire" if AVR_DRAGON_ISP || AVR_STK500V2
				default "--dragon --jtag $(CONFIG_AVR_PROG_PORT) --jtag-bitrate $(shell echo '$(CONFIG_SYSTEM_CLOCK_HZ) / (4 * 1000)' | bc -q)kHz" if AVR_DRAGON_JTAG
				default ""

			config AVR_PROG_TYPE
				string "Programmer"
				default "dragon_jtag" if AVR_DRAGON_JTAG
				default "dragon_isp" if AVR_DRAGON_ISP
				default "stk500v2" if AVR_STK500V2
				default "unkown programmer"
		endmenu
	endmenu

	# build tree
	config BUILD_TREE
		string "build tree"
		default "build/$(CONFIG_PROCESSOR)/$(CONFIG_BUILD_TYPE)"

	# toolchain prefixes
	config TOOLCHAIN_PREFIX
		string "Target toolchain prefix"
		default "avr-" if AVR
		default ""

	menu "Hidden"
		visible if 0

		config CC
			string CC
			default "$(CONFIG_TOOLCHAIN_PREFIX)gcc"

		config CXX
			string CXX
			default "$(CONFIG_TOOLCHAIN_PREFIX)g++"

		config AS
			string AS
			default "$(CONFIG_TOOLCHAIN_PREFIX)as"

		config AR
			string AR
			default "$(CONFIG_TOOLCHAIN_PREFIX)ar"

		config LD
			string LD
			default "$(CONFIG_TOOLCHAIN_PREFIX)ld"
	endmenu
endmenu
# }}}
